[{"C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\index.tsx":"1","C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\reportWebVitals.ts":"2","C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\App.tsx":"3","C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\components\\basic\\header.tsx":"4","C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\misc\\history.ts":"5","C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\services\\login.service.ts":"6","C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\components\\screens\\citizenRegistration.screen.tsx":"7","C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\components\\screens\\associationRegistration.screen.tsx":"8","C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\services\\host.service.ts":"9","C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\services\\api.service.ts":"10","C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\services\\place.service.ts":"11","C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\services\\registration.service.ts":"12","C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\services\\identity.service.ts":"13","C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\services\\association.service.ts":"14","C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\components\\basic\\association.card.tsx":"15","C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\components\\basic\\Header.tsx":"16","C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\routers\\home.router.tsx":"17","C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\components\\screens\\index.screen.tsx":"18","C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\components\\screens\\login.screen.tsx":"19","C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\components\\screens\\association.screen.tsx":"20","C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\components\\screens\\walkConfirmation.screen.tsx":"21","C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\components\\screens\\registration.screen.tsx":"22","C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\components\\screens\\walkConfirmed.screen.tsx":"23","C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\components\\screens\\statistics.screen.tsx":"24","C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\components\\basic\\total.statistics.tsx":"25","C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\components\\basic\\my.statistics.tsx":"26","C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\services\\walk.service.ts":"27","C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\services\\image.service.ts":"28","C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\components\\advanced\\animalSelector.tsx":"29","C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\components\\screens\\calendar.screen.tsx":"30","C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\components\\screens\\profile.screen.tsx":"31","C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\services\\statistics.service.ts":"32","C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\components\\screens\\association.screen.internal.tsx":"33","C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\services\\profile.service.ts":"34","C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\services\\calendar.service.ts":"35","C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\components\\basic\\animal.card.tsx":"36","C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\components\\screens\\associationEdit.screen.tsx":"37","C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\components\\screens\\citizenEdit.screen.tsx":"38","C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\components\\screens\\search.screen.tsx":"39","C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\components\\screens\\animalEdit.screen.tsx":"40","C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\components\\screens\\animalAdd.screen.tsx":"41","C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\services\\animal.service.ts":"42","C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\services\\accountEdit.service.ts":"43","C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\misc\\date.utils.ts":"44","C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\components\\advanced\\calendar.tsx":"45","C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\components\\basic\\calendar.item.tsx":"46"},{"size":563,"mtime":1610415457800,"results":"47","hashOfConfig":"48"},{"size":441,"mtime":1610415457816,"results":"49","hashOfConfig":"48"},{"size":597,"mtime":1610415457747,"results":"50","hashOfConfig":"48"},{"size":2759,"mtime":1610477456664,"results":"51","hashOfConfig":"48"},{"size":87,"mtime":1610415457804,"results":"52","hashOfConfig":"48"},{"size":1333,"mtime":1610415457827,"results":"53","hashOfConfig":"48"},{"size":10677,"mtime":1610478587614,"results":"54","hashOfConfig":"48"},{"size":14074,"mtime":1610478587612,"results":"55","hashOfConfig":"48"},{"size":143,"mtime":1610415457826,"results":"56","hashOfConfig":"48"},{"size":786,"mtime":1610415457823,"results":"57","hashOfConfig":"48"},{"size":603,"mtime":1610415457829,"results":"58","hashOfConfig":"48"},{"size":850,"mtime":1610478139816,"results":"59","hashOfConfig":"48"},{"size":563,"mtime":1610415457826,"results":"60","hashOfConfig":"48"},{"size":1633,"mtime":1610415457824,"results":"61","hashOfConfig":"48"},{"size":2008,"mtime":1610415457754,"results":"62","hashOfConfig":"48"},{"size":2490,"mtime":1610096055821,"results":"63","hashOfConfig":"48"},{"size":2885,"mtime":1610415457818,"results":"64","hashOfConfig":"48"},{"size":671,"mtime":1610415457789,"results":"65","hashOfConfig":"48"},{"size":3365,"mtime":1610440464505,"results":"66","hashOfConfig":"48"},{"size":724,"mtime":1610415457762,"results":"67","hashOfConfig":"48"},{"size":3173,"mtime":1610415457798,"results":"68","hashOfConfig":"48"},{"size":2071,"mtime":1610415457794,"results":"69","hashOfConfig":"48"},{"size":1151,"mtime":1610415457799,"results":"70","hashOfConfig":"48"},{"size":4553,"mtime":1610536369192,"results":"71","hashOfConfig":"48"},{"size":2794,"mtime":1610415457757,"results":"72","hashOfConfig":"48"},{"size":2711,"mtime":1610415457756,"results":"73","hashOfConfig":"48"},{"size":781,"mtime":1610415457830,"results":"74","hashOfConfig":"48"},{"size":820,"mtime":1610415457827,"results":"75","hashOfConfig":"48"},{"size":7349,"mtime":1610537686526,"results":"76","hashOfConfig":"48"},{"size":6281,"mtime":1610537897064,"results":"77","hashOfConfig":"48"},{"size":4833,"mtime":1610415457793,"results":"78","hashOfConfig":"48"},{"size":456,"mtime":1610415457830,"results":"79","hashOfConfig":"48"},{"size":3373,"mtime":1610537686528,"results":"80","hashOfConfig":"48"},{"size":1233,"mtime":1610415457829,"results":"81","hashOfConfig":"48"},{"size":236,"mtime":1610415457825,"results":"82","hashOfConfig":"48"},{"size":4858,"mtime":1610415457753,"results":"83","hashOfConfig":"48"},{"size":10829,"mtime":1610415457762,"results":"84","hashOfConfig":"48"},{"size":8886,"mtime":1610415457767,"results":"85","hashOfConfig":"48"},{"size":1648,"mtime":1610415457796,"results":"86","hashOfConfig":"48"},{"size":4188,"mtime":1610415457760,"results":"87","hashOfConfig":"48"},{"size":7015,"mtime":1610415457758,"results":"88","hashOfConfig":"48"},{"size":887,"mtime":1610415457822,"results":"89","hashOfConfig":"48"},{"size":878,"mtime":1610415457821,"results":"90","hashOfConfig":"48"},{"size":219,"mtime":1610415457803,"results":"91","hashOfConfig":"48"},{"size":1471,"mtime":1610415457749,"results":"92","hashOfConfig":"48"},{"size":1485,"mtime":1610415457755,"results":"93","hashOfConfig":"48"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},"bfpzc0",{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"96"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"96"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"96"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"96"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"159","messages":"160","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"96"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"166","messages":"167","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"96"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"96"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"96"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"96"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"96"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},"C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\index.tsx",[],["197","198"],"C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\reportWebVitals.ts",[],"C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\App.tsx",["199"],"import React from 'react';\r\nimport './App.css';\r\nimport Header from './components/basic/header';\r\nimport HomeRouter from './routers/home.router';\r\nimport {MuiPickersUtilsProvider} from '@material-ui/pickers';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\n\r\nconst media =\r\n{\r\n  desktop: '@media(min-width: 1000px)'\r\n}\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n          <Header />\r\n          <HomeRouter />\r\n        </MuiPickersUtilsProvider>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n","C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\components\\basic\\header.tsx",["200"],"import { Avatar, Button, Input } from '@material-ui/core';\r\nimport React, { ChangeEvent, useEffect, useState } from 'react';\r\nimport '../../styles/Header.css';\r\nimport history from '../../misc/history';\r\nimport LoginService from '../../services/login.service';\r\nimport {MdPets} from \"react-icons/md\";\r\nimport ImageService from '../../services/image.service';\r\n\r\n\r\nfunction Header() {\r\n    const [imgSrc, setImgSrc] = useState<string | undefined>(undefined);\r\n\r\n    const [burger, setBurger] = useState(false);\r\n\r\n    useEffect(() => {\r\n        ImageService.getUserImageAndSetIt(setImgSrc);\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <header>\r\n                <div className=\"nav\">\r\n                    <div className=\"homeicon\">\r\n                        <a href=\"/\"><MdPets className=\"headerlogo\"/></a>\r\n                        <a href=\"/\"><h1 className=\"title\">Humanitarni šetači pasa</h1></a>\r\n                    </div>\r\n                    <label htmlFor=\"toggle\" className=\"burgerbar\">&#9776;</label>\r\n                    <input type=\"checkbox\" checked={burger} onChange={(e: ChangeEvent<HTMLInputElement>) => setBurger(e.target.checked)} id=\"toggle\"/>\r\n                    <div className=\"menu\">\r\n                        <Button className=\"btn\" onClick={() => {history.push(\"/\"); setBurger(false);}}>Početna stranica</Button>\r\n                        <Button className=\"btn\" onClick={() => {history.push(\"/search\"); setBurger(false);}}>Pretraživanje</Button>\r\n                        <Button className=\"btn\" onClick={() => {history.push(\"/statistics\"); setBurger(false);}}>Statistika</Button>\r\n                        { LoginService.isLoggedIn() ? (\r\n                            <>\r\n                                <Button className=\"btn\" onClick={() => {history.push(\"/calendar\"); setBurger(false);}}>Raspored</Button>\r\n                                <Button className=\"btn\" onClick={() => {history.push(\"/profile\"); setBurger(false);}}>Profil&nbsp;&nbsp;<Avatar src={`data:image/*;base64,${imgSrc}`} /></Button>\r\n                                <Button className=\"btn\" onClick={() => {LoginService.logout(); setBurger(false);}}>Odjava</Button>\r\n                            </>\r\n                        ) : (\r\n                            <>\r\n                                <Button className=\"btn\" onClick={() => {history.push(\"/registration\"); setBurger(false);}}>Registracija</Button>\r\n                                <Button className=\"btn\" onClick={() => {history.push(\"/login\"); setBurger(false);}}>Prijava</Button>\r\n                            </>\r\n                        )}\r\n                    </div>\r\n                    \r\n\r\n                </div>\r\n            </header>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;","C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\misc\\history.ts",[],"C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\services\\login.service.ts",[],"C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\components\\screens\\citizenRegistration.screen.tsx",[],"C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\components\\screens\\associationRegistration.screen.tsx",[],"C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\services\\host.service.ts",[],"C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\services\\api.service.ts",[],"C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\services\\place.service.ts",[],"C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\services\\registration.service.ts",[],"C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\services\\identity.service.ts",[],"C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\services\\association.service.ts",[],"C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\components\\basic\\association.card.tsx",["201","202","203"],"import React from 'react';\r\nimport { Card, CardContent, CardMedia, CardActionArea, makeStyles, Typography } from '@material-ui/core';\r\nimport AssociationShortInfo from '../../models/associationShortInfo.model';\r\nimport imageService from '../../services/image.service';\r\nimport history from '../../misc/history';\r\nimport { blueGrey, grey, red } from '@material-ui/core/colors';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        display: 'inline-block',\r\n        margin: '25px 0px 0px 1.5%',  \r\n        width: 290,\r\n        height: 245\r\n    },\r\n    media: {\r\n        height: 140\r\n    },\r\n    card: {\r\n        height: 255,\r\n        color: 'rgb(45, 45, 193)',\r\n        width: 'fit-content',\r\n        minWidth: 280\r\n    }\r\n});\r\n\r\ntype AssociationCardProps = {\r\n    association: AssociationShortInfo\r\n}\r\n\r\nfunction AssociationCard(props: AssociationCardProps) {\r\n\r\n    const styles = useStyles();\r\n\r\n    return (\r\n        <div className={styles.root}>\r\n            <Card className={styles.card} variant=\"outlined\">\r\n                <CardActionArea onClick={event => {history.push(`/association/${props.association.id}`)}}>\r\n                    <CardMedia\r\n                        className={styles.media} component='img' src={imageService.getAssociationImageUrl(props.association.id)}\r\n                        onError={(e:any) => {\r\n                            e.target.src = imageService.getDefaultImage()\r\n                        }}\r\n                    />\r\n                    <CardContent>\r\n                        <Typography variant=\"h5\" component=\"h2\">\r\n                            {props.association.name}\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\" gutterBottom>\r\n                            {props.association.address + ', ' + props.association.place}\r\n                        </Typography>\r\n                    </CardContent>\r\n                </CardActionArea>\r\n            </Card>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AssociationCard;","C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\components\\basic\\Header.tsx",[],"C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\routers\\home.router.tsx",[],"C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\components\\screens\\index.screen.tsx",[],"C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\components\\screens\\login.screen.tsx",[],"C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\components\\screens\\association.screen.tsx",["204","205","206","207"],"import React from 'react';\r\nimport '../../styles/Association.css';\r\nimport '../../styles/Global.css';\r\nimport imageService from '../../services/image.service';\r\nimport AssociationService from '../../services/association.service';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport AnimalSelector from '../advanced/animalSelector';\r\nimport AssociationScreenInternal from './association.screen.internal';\r\nimport { Button } from '@material-ui/core';\r\n\r\ntype AssociationScreenProps = {\r\n    id: string\r\n}\r\n\r\nfunction AssociationScreen({ match }: RouteComponentProps<AssociationScreenProps>) {\r\n    return ( \r\n        <AssociationScreenInternal id={match.params.id} />\r\n    );\r\n}\r\n\r\nexport default AssociationScreen;\r\n","C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\components\\screens\\walkConfirmation.screen.tsx",[],"C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\components\\screens\\registration.screen.tsx",[],"C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\components\\screens\\walkConfirmed.screen.tsx",[],"C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\components\\screens\\statistics.screen.tsx",[],"C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\components\\basic\\total.statistics.tsx",[],"C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\components\\basic\\my.statistics.tsx",[],"C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\services\\walk.service.ts",[],"C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\services\\image.service.ts",[],"C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\components\\advanced\\animalSelector.tsx",[],"C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\components\\screens\\calendar.screen.tsx",["208","209","210"],"C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\components\\screens\\profile.screen.tsx",["211","212"],"import React, { ChangeEvent, useEffect, useState } from 'react';\r\nimport { Button, Grid } from '@material-ui/core';\r\nimport obj from '../../services/identity.service';\r\nimport {Box, Typography} from '@material-ui/core';\r\nimport imageService from '../../services/image.service';\r\nimport MyStatistics from '../basic/my.statistics';\r\nimport ProfileService from '../../services/profile.service';\r\nimport AssociationScreenInternal from './association.screen.internal';\r\nimport '../../styles/Profie.css';\r\nimport '../../styles/Global.css';\r\nimport history from '../../misc/history';\r\nimport api from '../../services/api.service';\r\nimport { AxiosResponse } from 'axios';\r\n\r\nfunction Profile() {\r\n    let upload: HTMLInputElement | null = null;\r\n\r\n    const imageUpload = () => {\r\n        upload!.click();\r\n    }\r\n\r\n    const onChangeFile = (event: ChangeEvent<HTMLInputElement>) => {\r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n        if (event.target.files) {\r\n            var file = event.target.files[0];\r\n            console.log(file);\r\n\r\n            var form = new FormData();\r\n            form.append('imagefile', file);\r\n\r\n            api.post(imageService.getUserImageUrl(), form, {\r\n                headers: 'multipart/form-data'\r\n            }).then((response: AxiosResponse) => {\r\n                window.location.reload(false);\r\n            });\r\n        }\r\n    }\r\n\r\n    const userDetails = obj.getIdentityContext();\r\n\r\n    const [imgSrc, setImgSrc] = useState<string | undefined>(undefined);\r\n\r\n    useEffect(() => {\r\n        imageService.getUserImageAndSetIt(setImgSrc);\r\n    }, []);\r\n\r\n    const data = ProfileService.useGetProfile();\r\n\r\n    return ((!!data ?\r\n        (<div>\r\n\r\n            <input id=\"imageInput\"\r\n                type=\"file\"\r\n                ref={(ref) => upload = ref}\r\n                style={{display: 'none'}}\r\n                onChange={onChangeFile}\r\n            />\r\n\r\n           {userDetails?.roles.includes(\"ROLE_ASSOCIATION\") ? (\r\n            <>\r\n                <div style={{margin: \"10px 0px\", display: 'flex'}}>\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={() => {history.push(\"/profile/association/edit\")}}>Uredi podatke</Button>\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={() => {imageUpload()}}>Promijeni sliku</Button>\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={() => {history.push(\"/profile/association/animals\")}}>Uredi pse</Button>\r\n                </div>\r\n                <AssociationScreenInternal id={data.id.toString()} />\r\n            </>\r\n            ): ( \r\n            <>\r\n           \r\n           <div className={\"container-page\"}>\r\n                <div className=\"container-profile\">\r\n                    <div>\r\n                        <img alt=\"\" src={`data:image/*;base64,${imgSrc}`}></img>\r\n                    </div>\r\n                    <div>\r\n                        <div className=\"container-profileinfo\">\r\n                            <h2>Moj profil</h2>\r\n                        </div>\r\n                        <Typography variant=\"h4\" align=\"center\">{data!.firstName}</Typography>\r\n                        <Typography variant=\"h4\" align=\"center\">{data!.lastName}</Typography>\r\n                        <Typography variant=\"h4\" align=\"center\">{data!.email}</Typography>\r\n                        <Typography variant=\"h4\" align=\"center\">{data!.username}</Typography>\r\n                        <Typography variant=\"h4\" align=\"center\">{data!.phoneNumber}</Typography>\r\n                        <Button variant=\"contained\" color=\"primary\" onClick={() => {history.push(\"/profile/citizen/edit\")}} className=\"editbutton\">Uredi podatke</Button>\r\n                        <Button variant=\"contained\" color=\"primary\" onClick={() => {imageUpload()}} className=\"editbutton\">Promijeni sliku</Button>\r\n                    </div>  \r\n                </div>\r\n                <div className=\"profiletitle\">\r\n                    <p>Moja statistika:</p>\r\n                </div>   \r\n                <div className=\"statisticsdiv\">\r\n                    <MyStatistics/>\r\n                </div>         \r\n            </div>\r\n            </>\r\n             )} \r\n           \r\n        \r\n        </div>) : <>\r\n                <div className=\"center\">\r\n                   Niste prijavljeni. Ako već imate račun molimo pritisnite na\r\n                    <a href=\"/login\"><Button className=\"btn\" onClick={() => history.push(\"/login\")}>Prijavi se</Button></a>\r\n                    a ako nemate pritisnite\r\n                    <a href=\"/registration\"><Button className=\"btn\"\r\n                                                    onClick={() => history.push(\"/registration\")}>Registriraj se</Button></a>\r\n\r\n                </div>\r\n\r\n            </>\r\n            ));\r\n   \r\n}\r\n\r\nexport default Profile;","C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\services\\statistics.service.ts",[],"C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\components\\screens\\association.screen.internal.tsx",["213"],"C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\services\\profile.service.ts",["214"],"import React, { useEffect, useState } from 'react';\r\nimport Animal from '../models/animal.model';\r\nimport CitizenAccountModel from '../models/citizenAccount.model';\r\nimport api from '../services/api.service'\r\nimport getHostName from '../services/host.service'\r\n\r\nasync function getCitizenProfile(): Promise<CitizenAccountModel>{\r\n    const { data } = await api.get(getHostName(\"/profile\"));\r\n    return data;\r\n\r\n}\r\n\r\nconst useGetProfile = () => {\r\n    const [data, setData] = useState<CitizenAccountModel>();\r\n\r\n    const getData = async () => {\r\n        const results = await getCitizenProfile();\r\n        setData(results);\r\n    }\r\n\r\n    useEffect(() => {\r\n        getData()\r\n    }, []);\r\n\r\n    return data;\r\n}\r\n\r\nasync function getAnimals(): Promise<Animal[]>{\r\n    const { data } = await api.get(getHostName(\"/association/animals\"));\r\n\r\n    return data;\r\n}\r\n\r\nconst useGetAnimals = () => {\r\n    const [data, setData] = useState<Animal[]>();\r\n\r\n    const getData = async () => {\r\n        const results = await getAnimals();\r\n        setData(results);\r\n    }\r\n\r\n    useEffect(() => {\r\n        getData()\r\n    }, []);\r\n\r\n    return data;\r\n}\r\n\r\nconst ProfileService = {useGetProfile, useGetAnimals};\r\n\r\nexport default ProfileService;\r\n","C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\services\\calendar.service.ts",[],"C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\components\\basic\\animal.card.tsx",[],"C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\components\\screens\\associationEdit.screen.tsx",["215"],"import AssociationAccountModel from \"../../models/associationAccount.model\";\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport React, { ChangeEvent, useEffect } from 'react';\r\nimport { useForm, Controller } from 'react-hook-form';\r\nimport { Checkbox, FormControl, FormControlLabel, FormHelperText, InputLabel, MenuItem, Select } from '@material-ui/core';\r\nimport { useGetPlaces } from '../../services/place.service';\r\nimport '../../styles/Registration.css';\r\nimport history from '../../misc/history';\r\nimport RegistrationValidationError from '../../models/registrationValidationError.model';\r\nimport {MdPets} from \"react-icons/md\";\r\nimport ProfileService from '../../services/profile.service';\r\nimport AccountEditService from \"../../services/accountEdit.service\";\r\nimport AssociationRegistrationInfo from \"../../models/associationRegistration.model\";\r\n\r\nexport default function AssociationEditScreen() {\r\n    const profileData = ProfileService.useGetProfile() as unknown as AssociationAccountModel;\r\n\r\n    const data = useGetPlaces();\r\n\r\n    const { register, handleSubmit, control, errors, setError, setValue } = useForm<AssociationRegistrationInfo>();\r\n\r\n    useEffect(() => {\r\n        register(\"isPublic\");\r\n    }, []);\r\n\r\n    let isPublicValueChanged = false;\r\n\r\n    const isPublicChanged = (event: ChangeEvent<HTMLElement>, checked: boolean) => {\r\n            setValue(\"isPublic\", checked);\r\n            isPublicValueChanged = true;\r\n    }\r\n\r\n    const onSubmit = (data: AssociationRegistrationInfo) => {\r\n        console.log(data);\r\n\r\n        if (!isPublicValueChanged)\r\n            data.isPublic = profileData.public;   \r\n\r\n        AccountEditService.postAssociationEdit(\r\n            data\r\n        ).then(response => {\r\n            if (response.status === 200) {\r\n                history.push(\"/\");\r\n            }\r\n        }).catch(error => {\r\n            const data = (error.response.data as RegistrationValidationError);\r\n\r\n            switch (data.field) {\r\n                case \"USERNAME\":\r\n                if (data.error === \"NON_UNIQUE\") {\r\n                    setError(\"username\", { type: \"validate\", message: \"Korisničko ime je zauzeto!\" });\r\n                }\r\n                break;\r\n                case \"EMAIL\":\r\n                if (data.error === \"NON_UNIQUE\") {\r\n                    setError(\"email\", { type: \"validate\", message: \"Email adresa je zauzeta!\" });\r\n                }\r\n                break;\r\n                case \"PHONE_NUMBER\":\r\n                if (data.error === \"INVALID_FORMAT\") {\r\n                    setError(\"phoneNumber\", { type: \"validate\", message: \"Format broja telefona nije validan.\"});\r\n                }   \r\n            }\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div>\r\n         {(!!profileData && (\r\n         <div className=\"associationregistrationbox\">\r\n         <a href=\"/\"><MdPets className=\"bigregistrationlogo\"/></a>\r\n            <div className=\"container\">\r\n               <form onSubmit={handleSubmit(onSubmit)} className=\"form-registration\" noValidate>\r\n                  <div className=\"horizontal-center\">\r\n                     <h2 className=\"text\">Izmjena udruge:</h2>\r\n                  </div>\r\n                  <h3 className=\"registrationtext\">Korisničko ime</h3>\r\n                  <div className=\"horizontal-center\">\r\n                     <TextField id=\"username\" \r\n                        inputRef={register({\r\n                           pattern: {\r\n                              value: /^[A-Z0-9._-]{6,20}$/i,\r\n                              message: \"Format korisničkog imena nije validan.\"\r\n                           }\r\n                        })} \r\n                        name=\"username\" \r\n                        label=\"Unesite korisničko ime\" \r\n                        variant=\"outlined\"\r\n                        className=\"textfield\"\r\n                        defaultValue={profileData.username}\r\n                        helperText={errors.username && errors.username.message} \r\n                        error={!!errors.username} />\r\n                  </div>\r\n                  <h3 className=\"registrationtext\">E-mail</h3>\r\n                  <div className=\"horizontal-center\">\r\n                     <TextField id=\"email\" \r\n                        type=\"email\" \r\n                        inputRef={register({\r\n                           pattern: {\r\n                              value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\r\n                              message: \"Format adrese nije validan.\"\r\n                           }\r\n                        })} \r\n                        name=\"email\" \r\n                        label=\"Unesite e-mail adresu\" \r\n                        variant=\"outlined\"\r\n                        defaultValue={profileData.email}\r\n                        className=\"textfield\"\r\n                        helperText={errors.email && errors.email.message}\r\n                        error={!!errors.email} />\r\n                  </div>\r\n                  <h3 className=\"registrationtext\">Lozinka</h3>\r\n                  <div className=\"horizontal-center\">\r\n                     <TextField id=\"password\" \r\n                        type=\"password\" \r\n                        inputRef={register({\r\n                           pattern: {\r\n                              value: /^[A-Za-z0-9.!_-]{8,30}$/,\r\n                              message: \"Format šifre nije validan.\"\r\n                           }\r\n                        })} \r\n                        name=\"password\" \r\n                        label=\"Unesite lozinku\" \r\n                        variant=\"outlined\"\r\n                        className=\"textfield\"\r\n                        helperText={errors.password && errors.password.message}\r\n                        error={!!errors.password} />\r\n                  </div>\r\n                  <h3 className=\"registrationtext\">Naziv</h3>\r\n                  <div className=\"horizontal-center\">\r\n                     <TextField id=\"name\" \r\n                        inputRef={register()} \r\n                        name=\"name\" \r\n                        label=\"Unesite naziv udruge\" \r\n                        variant=\"outlined\" \r\n                        defaultValue={profileData.name}\r\n                        className=\"textfield\"\r\n                        helperText={errors.name && errors.name.message}\r\n                        error={!!errors.name} />\r\n                  </div>\r\n                  <h3 className=\"registrationtext\">Broj telefona</h3>\r\n                  <div className=\"horizontal-center\">\r\n                     <TextField id=\"phoneNumber\" \r\n                        type=\"tel\" \r\n                        inputRef={register()} \r\n                        name=\"phoneNumber\" \r\n                        label=\"Unesite broj telefona\" \r\n                        variant=\"outlined\"\r\n                        defaultValue={profileData.phoneNumber}\r\n                        className=\"textfield\"\r\n                        helperText={errors.phoneNumber && errors.phoneNumber.message}\r\n                        error={!!errors.phoneNumber} />\r\n                  </div>\r\n                  <h3 className=\"registrationtext\">OIB</h3>\r\n                  <div className=\"horizontal-center\">\r\n                     <TextField id=\"oib\" \r\n                        type=\"oib\" \r\n                        inputRef={register({\r\n                           pattern: {\r\n                              value: /^[0-9]{11}$/i,\r\n                              message: \"Format OIB-a nije validan.\"\r\n                           }\r\n                        })} \r\n                        name=\"oib\" \r\n                        label=\"Unesite OIB\" \r\n                        variant=\"outlined\"\r\n                        defaultValue={profileData.oib}\r\n                        className=\"textfield\"\r\n                        helperText={errors.oib && errors.oib.message}\r\n                        error={!!errors.oib} />\r\n                  </div>\r\n                  <h3 className=\"registrationtext\">Adresa</h3>\r\n                  <div className=\"horizontal-center\">\r\n                     <TextField id=\"address\" \r\n                        inputRef={register()} \r\n                        name=\"address\" \r\n                        label=\"Unesite adresu\" \r\n                        variant=\"outlined\"\r\n                        defaultValue={profileData.address}\r\n                        className=\"textfield\"\r\n                        helperText={errors.address && errors.address.message}\r\n                        error={!!errors.address} />\r\n                  </div>\r\n                  <h3 className=\"registrationtext\">Mjesto</h3>\r\n                  <div className=\"horizontal-center\">\r\n                     <FormControl className=\"form-registration-select\" error={!!errors.place} variant=\"outlined\">\r\n                        <InputLabel htmlFor=\"place-select\" >Odaberite mjesto</InputLabel>\r\n                        <Controller\r\n                           as={\r\n                              <Select name=\"place-select\" id=\"place-select\" label=\"Mjesto\">\r\n                                 {\r\n                                    data.map(place => \r\n                                       (<MenuItem key={place.id} value={place.id}>{place.name}</MenuItem>)\r\n                                    )\r\n                                 }\r\n                              </Select>\r\n                           }\r\n                           defaultValue={profileData.place.id}\r\n                           control={control}\r\n                           name=\"place\"\r\n                           id=\"place\"\r\n                           rules = {{ required: \"Polje je obavezno.\" }}\r\n                        />\r\n                        <FormHelperText>{errors.place && errors.place.message}</FormHelperText>\r\n                     </FormControl>\r\n                  </div>\r\n                  <div className=\"horizontal-center\">\r\n                      <FormControlLabel\r\n                        className=\"text\"\r\n                        control={\r\n                            <Checkbox \r\n                                    name=\"isPublic\"\r\n                                    id=\"isPublic\" \r\n                                    onChange={isPublicChanged}\r\n                                    defaultChecked={profileData.public}\r\n                                    className=\"checkbox\"\r\n                                />\r\n                        }\r\n                        label=\"Želim da moja udruga bude javna\"  \r\n                        />\r\n                  </div>\r\n                  <div className=\"horizontal-center\">\r\n                     <Button type=\"submit\" variant=\"contained\" color=\"primary\">Spremi podatke</Button>\r\n                  </div>\r\n               </form>\r\n            </div>\r\n         </div>))}\r\n      </div>\r\n    );\r\n}","C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\components\\screens\\citizenEdit.screen.tsx",["216","217"],"import Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport React, { ChangeEvent, useEffect } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport CitizenRegistrationInfo from '../../models/citizenRegistration.model';\r\nimport '../../styles/Registration.css';\r\nimport RegistrationService from '../../services/registration.service';\r\nimport history from '../../misc/history';\r\nimport RegistrationValidationError from '../../models/registrationValidationError.model';\r\nimport {MdPets} from \"react-icons/md\";\r\nimport ProfileService from '../../services/profile.service';\r\nimport { Checkbox, FormControlLabel } from '@material-ui/core';\r\nimport AccountEditService from '../../services/accountEdit.service';\r\n\r\nfunction CitizenAccountEdit() {\r\n    const profileData = ProfileService.useGetProfile();\r\n\r\n    const { register, handleSubmit, errors, setError, setValue } = useForm<CitizenRegistrationInfo>();\r\n\r\n    useEffect(() => {\r\n        register(\"isPublic\");\r\n    }, []);\r\n\r\n    let isPublicValueChanged = false;\r\n\r\n    const isPublicChanged = (event: ChangeEvent<HTMLElement>, checked: boolean) => {\r\n        setValue(\"isPublic\", checked);\r\n        isPublicValueChanged = true;\r\n    }\r\n\r\n    const onSubmit = (data: CitizenRegistrationInfo) => {\r\n        console.log(data);\r\n\r\n        if (!isPublicValueChanged)\r\n            data.isPublic = profileData!.public;   \r\n\r\n        AccountEditService.postCitizenEdit(\r\n            data\r\n        ).then(response => {\r\n            if (response.status === 200) {\r\n                history.push(\"/\");\r\n            }\r\n        }).catch(error => {\r\n            const data = (error.response.data as RegistrationValidationError);\r\n\r\n            switch (data.field) {\r\n                case \"USERNAME\":\r\n                if (data.error === \"NON_UNIQUE\") {\r\n                    setError(\"username\", { type: \"validate\", message: \"Korisničko ime je zauzeto!\" });\r\n                }\r\n                break;\r\n                case \"EMAIL\":\r\n                if (data.error === \"NON_UNIQUE\") {\r\n                    setError(\"email\", { type: \"validate\", message: \"Email adresa je zauzeta!\" });\r\n                }\r\n                break;\r\n                case \"PHONE_NUMBER\":\r\n                if (data.error === \"INVALID_FORMAT\") {\r\n                    setError(\"phoneNumber\", { type: \"validate\", message: \"Format broja telefona nije validan.\"});\r\n                }  \r\n            }\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {(!!profileData && (\r\n            <div className=\"citizenregistrationbox\">\r\n            <a href=\"/\"><MdPets className=\"bigregistrationlogo\"/></a>\r\n                <div className=\"container\">\r\n                <form onSubmit={handleSubmit(onSubmit)} className=\"form-registration\" noValidate>\r\n                    <div className=\"horizontal-center\">\r\n                        <h1 className=\"text\">Izmjena profila:</h1>\r\n                    </div>\r\n                    <h3 className=\"registrationtext\">Korisničko ime</h3>\r\n                    <div className=\"horizontal-center\">\r\n                        <TextField id=\"username\" \r\n                            inputRef={register({\r\n                            pattern: {\r\n                                value: /^[A-Z0-9._-]{6,20}$/i,\r\n                                message: \"Format korisničkog imena nije validan.\"\r\n                            }\r\n                            })} \r\n                            name=\"username\" \r\n                            label=\"Unesite korisničko ime\" \r\n                            variant=\"outlined\"\r\n                            defaultValue={profileData.username}\r\n                            className=\"textfield\"\r\n                            helperText={errors.username && errors.username.message} \r\n                            error={!!errors.username} />\r\n                    </div>\r\n                    <h3 className=\"registrationtext\">E-mail adresa</h3>\r\n                    <div className=\"horizontal-center\">\r\n                        <TextField id=\"email\" \r\n                            type=\"email\" \r\n                            inputRef={register({\r\n                            pattern: {\r\n                                value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\r\n                                message: \"Format adrese nije validan.\"\r\n                            }\r\n                            })} \r\n                            name=\"email\" \r\n                            label=\"Unesite e-mail adresu\" \r\n                            variant=\"outlined\"\r\n                            defaultValue={profileData.email}\r\n                            className=\"textfield\"\r\n                            helperText={errors.email && errors.email.message}\r\n                            error={!!errors.email} />\r\n                    </div>\r\n                    <h3 className=\"registrationtext\">Lozinka</h3>\r\n                    <div className=\"horizontal-center\">\r\n                        <TextField id=\"password\" \r\n                            type=\"password\" \r\n                            inputRef={register({\r\n                            pattern: {\r\n                                value: /^[A-Z0-9.!_-]{8,30}$/i,\r\n                                message: \"Format šifre nije validan.\"\r\n                            }\r\n                            })} \r\n                            name=\"password\" \r\n                            label=\"Unesite lozinku\" \r\n                            variant=\"outlined\"\r\n                            className=\"textfield\"\r\n                            helperText={errors.password && errors.password.message}\r\n                            error={!!errors.password} />\r\n                    </div>\r\n                    <h3 className=\"registrationtext\">Ime</h3>\r\n                    <div className=\"horizontal-center\">\r\n                        <TextField id=\"firstName\" \r\n                            inputRef={register()} \r\n                            name=\"firstName\" \r\n                            label=\"Unesite ime\" \r\n                            variant=\"outlined\"\r\n                            defaultValue={profileData.firstName}\r\n                            className=\"textfield\" \r\n                            helperText={errors.firstName && errors.firstName.message}\r\n                            error={!!errors.firstName} />\r\n                    </div>\r\n                    <h3 className=\"registrationtext\">Prezime</h3>\r\n                    <div className=\"horizontal-center\">\r\n                        <TextField id=\"lastName\" \r\n                            inputRef={register()} \r\n                            name=\"lastName\" \r\n                            label=\"Unesite prezime\" \r\n                            variant=\"outlined\"\r\n                            defaultValue={profileData.lastName}\r\n                            className=\"textfield\"\r\n                            helperText={errors.lastName && errors.lastName.message}\r\n                            error={!!errors.lastName} />\r\n                    </div>\r\n                    <h3 className=\"registrationtext\">Broj telefona</h3>\r\n                    <div className=\"horizontal-center\">\r\n                        <TextField id=\"phoneNumber\" \r\n                            type=\"tel\" \r\n                            inputRef={register()} \r\n                            name=\"phoneNumber\" \r\n                            label=\"Unesite broj telefona\" \r\n                            variant=\"outlined\"\r\n                            defaultValue={profileData.phoneNumber}\r\n                            className=\"textfield\"\r\n                            helperText={errors.phoneNumber && errors.phoneNumber.message}\r\n                            error={!!errors.phoneNumber} />\r\n                    </div>\r\n                    <div className=\"horizontal-center\">\r\n                        <FormControlLabel\r\n                            className=\"text\"\r\n                            control={\r\n                                <Checkbox\r\n                                        name=\"isPublic\"\r\n                                        id=\"isPublic\" \r\n                                        onChange={isPublicChanged}\r\n                                        defaultChecked={profileData.public}\r\n                                        className=\"checkbox\"\r\n                                    />\r\n                            }\r\n                            label=\"Želim da moja statistika bude javna\"  \r\n                            />\r\n                    </div>\r\n                    <div className=\"horizontal-center\">\r\n                        <Button type=\"submit\" variant=\"contained\" color=\"primary\">Spremi podatke</Button>\r\n                    </div>\r\n                </form>\r\n                </div>\r\n            </div>))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CitizenAccountEdit;\r\n\r\n","C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\components\\screens\\search.screen.tsx",[],"C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\components\\screens\\animalEdit.screen.tsx",[],"C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\components\\screens\\animalAdd.screen.tsx",["218"],"import { Button, FormControl, FormHelperText, InputLabel, MenuItem, Select, TextField } from '@material-ui/core';\r\nimport React from 'react';\r\nimport { Controller, useForm } from 'react-hook-form';\r\nimport { MdPets } from 'react-icons/md';\r\nimport NewAnimal from '../../models/newAnimal.model';\r\nimport AnimalService from '../../services/animal.service';\r\nimport history from '../../misc/history';\r\nimport '../../styles/AddAnimal.css';\r\n\r\nexport default function AnimalAddScreen() {\r\n    const breeds = AnimalService.useGetBreeds();\r\n\r\n    const { register, handleSubmit, control, errors, setError } = useForm<NewAnimal>();\r\n\r\n    const onSubmit = (data: NewAnimal) => {\r\n        AnimalService.postAnimal(data).then(() => {\r\n            history.push(\"/profile/association/animals\");\r\n        });\r\n    }\r\n\r\n    return (<div>\r\n        <div className=\"addanimalbox\">\r\n         <a href=\"/\"><MdPets className=\"addanimallogo\"/></a>\r\n            <div className=\"container\">\r\n               <form onSubmit={handleSubmit(onSubmit)} className=\"form-registration\" noValidate>\r\n                  <div className=\"horizontal-center-add-animal\">\r\n                     <h2 className=\"text\">Dodavanje psa:</h2>\r\n                  </div>\r\n                  <h3 className=\"addanimaltext\">Ime</h3>\r\n                  <div className=\"horizontal-center-add-animal\">\r\n                     <TextField id=\"name\" \r\n                        inputRef={register({\r\n                           required: \"Polje je obavezno.\"\r\n                        })} \r\n                        name=\"name\" \r\n                        label=\"Unesite ime psa\" \r\n                        variant=\"outlined\"\r\n                        className=\"textfield\"\r\n                        helperText={errors.name && errors.name.message} \r\n                        error={!!errors.name} />\r\n                  </div>\r\n                  <h3 className=\"addanimaltext\">Pasmina</h3>\r\n                  <div className=\"horizontal-center\">\r\n                    <FormControl className=\"form-registration-select\" error={!!errors.breedId} variant=\"outlined\">\r\n                        <InputLabel htmlFor=\"breed-select\" >Odaberite pasminu</InputLabel>\r\n                        <Controller\r\n                           as={\r\n                              <Select name=\"breed-select\" id=\"breed-select\" label=\"Pasmina\">\r\n                                 {\r\n                                    breeds.map(b => \r\n                                       (<MenuItem key={b.id} value={b.id}>{b.breedName}</MenuItem>)\r\n                                    )\r\n                                 }\r\n                              </Select>\r\n                           }\r\n                           defaultValue={\"\"}\r\n                           control={control}\r\n                           name=\"breedId\"\r\n                           id=\"breedId\"\r\n                           rules = {{ required: \"Polje je obavezno.\" }}\r\n                        />\r\n                        <FormHelperText>{errors.breedId && errors.breedId.message}</FormHelperText>\r\n                     </FormControl>\r\n                  </div>\r\n                  <h3 className=\"addanimaltext\">Godište</h3>\r\n                  <div className=\"horizontal-center-add-animal\">\r\n                     <TextField id=\"birthYear\" \r\n                        inputRef={register({\r\n                           required: \"Polje je obavezno.\"\r\n                        })} \r\n                        name=\"birthYear\" \r\n                        label=\"Unesite godište\" \r\n                        variant=\"outlined\"\r\n                        className=\"textfield\"\r\n                        helperText={errors.birthYear && errors.birthYear.message}\r\n                        error={!!errors.birthYear} />\r\n                  </div>\r\n                  <h3 className=\"addanimaltext\">Spol</h3>\r\n                  <div className=\"horizontal-center\">\r\n                     <FormControl className=\"form-registration-select\" error={!!errors.gender} variant=\"outlined\">\r\n                        <InputLabel htmlFor=\"gender-select\" >Odaberite spol</InputLabel>\r\n                        <Controller\r\n                           as={\r\n                              <Select name=\"gender-select\" id=\"gender-select\" label=\"Mjesto\">\r\n                                 <MenuItem key={\"m\"} value={\"MALE\"}>Muško</MenuItem>\r\n                                 <MenuItem key={\"f\"} value={\"FEMALE\"}>Žensko</MenuItem>\r\n                              </Select>\r\n                           }\r\n                           defaultValue={\"\"}\r\n                           control={control}\r\n                           name=\"gender\"\r\n                           id=\"gender\"\r\n                           rules = {{ required: \"Polje je obavezno.\" }}\r\n                        />\r\n                        <FormHelperText>{errors.gender && errors.gender.message}</FormHelperText>\r\n                     </FormControl>\r\n                  </div>\r\n                  <h3 className=\"addanimaltext\">Vrsta šetnje</h3>\r\n                  <div className=\"horizontal-center\">\r\n                     <FormControl className=\"form-registration-select\" error={!!errors.walkType} variant=\"outlined\">\r\n                        <InputLabel htmlFor=\"walktype-select\" >Odaberite vrstu šetnje</InputLabel>\r\n                        <Controller\r\n                           as={\r\n                              <Select name=\"walktype-select\" id=\"walktype-select\" label=\"Mjesto\">\r\n                                 <MenuItem key={\"single\"} value={\"SINGLE\"}>Pojedinačna</MenuItem>\r\n                                 <MenuItem key={\"group\"} value={\"GROUP\"}>Grupna</MenuItem>\r\n                              </Select>\r\n                           }\r\n                           defaultValue={\"\"}\r\n                           control={control}\r\n                           name=\"walkType\"\r\n                           id=\"walkType\"\r\n                           rules = {{ required: \"Polje je obavezno.\" }}\r\n                        />\r\n                        <FormHelperText>{errors.walkType && errors.walkType.message}</FormHelperText>\r\n                     </FormControl>\r\n                  </div>\r\n                  <h3 className=\"addanimaltext\">Opis</h3>\r\n                  <div className=\"horizontal-center-add-animal\">\r\n                     <TextField id=\"description\" \r\n                        inputRef={register()} \r\n                        name=\"description\" \r\n                        label=\"Unesite opis\" \r\n                        variant=\"outlined\"\r\n                        className=\"textfield\"\r\n                        helperText={errors.description && errors.description.message}\r\n                        error={!!errors.description} />\r\n                  </div>\r\n                  <div className=\"horizontal-center-add-animal-btn\">\r\n                     <Button type=\"submit\" variant=\"contained\" color=\"primary\">Dodaj</Button>\r\n                  </div>\r\n               </form>\r\n            </div>\r\n         </div>\r\n    </div>);\r\n}","C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\services\\animal.service.ts",["219"],"import api from './api.service'\r\nimport { useEffect, useState } from \"react\";\r\nimport PlaceModel from \"../models/place.model\";\r\nimport getHostName from \"./host.service\";\r\nimport Breed from '../models/breed.model';\r\nimport NewAnimal from '../models/newAnimal.model';\r\n\r\nconst postAnimal = (animal: NewAnimal) => {\r\n    return api.post(getHostName(\"/association/animals/add\"), animal);\r\n}\r\n\r\nasync function getBreedsData(): Promise<Breed[]> {\r\n    const { data } = await api.get(getHostName(\"/breeds\"));\r\n    return data;\r\n}\r\n\r\nconst useGetBreeds = () => {\r\n    const [data, setData] = useState<Breed[]>([]);\r\n\r\n    const getData = async () => {\r\n        const results = await getBreedsData();\r\n        setData(results)\r\n    }\r\n\r\n    useEffect(() => {\r\n        getData()\r\n    }, [])\r\n\r\n    return data;\r\n}\r\n\r\nconst AnimalService = {useGetBreeds, postAnimal};\r\nexport default AnimalService;","C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\services\\accountEdit.service.ts",[],"C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\misc\\date.utils.ts",[],"C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\components\\advanced\\calendar.tsx",[],"C:\\Programming\\ProjektPI\\oneclick\\IzvorniKod\\frontend\\oneclick-frontend\\src\\components\\basic\\calendar.item.tsx",[],{"ruleId":"220","replacedBy":"221"},{"ruleId":"222","replacedBy":"223"},{"ruleId":"224","severity":1,"message":"225","line":8,"column":7,"nodeType":"226","messageId":"227","endLine":8,"endColumn":12},{"ruleId":"224","severity":1,"message":"228","line":1,"column":26,"nodeType":"226","messageId":"227","endLine":1,"endColumn":31},{"ruleId":"224","severity":1,"message":"229","line":6,"column":10,"nodeType":"226","messageId":"227","endLine":6,"endColumn":18},{"ruleId":"224","severity":1,"message":"230","line":6,"column":20,"nodeType":"226","messageId":"227","endLine":6,"endColumn":24},{"ruleId":"224","severity":1,"message":"231","line":6,"column":26,"nodeType":"226","messageId":"227","endLine":6,"endColumn":29},{"ruleId":"224","severity":1,"message":"232","line":4,"column":8,"nodeType":"226","messageId":"227","endLine":4,"endColumn":20},{"ruleId":"224","severity":1,"message":"233","line":5,"column":8,"nodeType":"226","messageId":"227","endLine":5,"endColumn":26},{"ruleId":"224","severity":1,"message":"234","line":7,"column":8,"nodeType":"226","messageId":"227","endLine":7,"endColumn":22},{"ruleId":"224","severity":1,"message":"235","line":9,"column":10,"nodeType":"226","messageId":"227","endLine":9,"endColumn":16},{"ruleId":"224","severity":1,"message":"236","line":2,"column":17,"nodeType":"226","messageId":"227","endLine":2,"endColumn":26},{"ruleId":"224","severity":1,"message":"237","line":9,"column":18,"nodeType":"226","messageId":"227","endLine":9,"endColumn":27},{"ruleId":"224","severity":1,"message":"238","line":11,"column":10,"nodeType":"226","messageId":"227","endLine":11,"endColumn":31},{"ruleId":"224","severity":1,"message":"239","line":2,"column":18,"nodeType":"226","messageId":"227","endLine":2,"endColumn":22},{"ruleId":"224","severity":1,"message":"240","line":4,"column":9,"nodeType":"226","messageId":"227","endLine":4,"endColumn":12},{"ruleId":"241","severity":1,"message":"242","line":53,"column":29,"nodeType":"243","endLine":61,"endColumn":49},{"ruleId":"224","severity":1,"message":"244","line":1,"column":8,"nodeType":"226","messageId":"227","endLine":1,"endColumn":13},{"ruleId":"245","severity":1,"message":"246","line":25,"column":8,"nodeType":"247","endLine":25,"endColumn":10,"suggestions":"248"},{"ruleId":"224","severity":1,"message":"249","line":7,"column":8,"nodeType":"226","messageId":"227","endLine":7,"endColumn":27},{"ruleId":"245","severity":1,"message":"246","line":22,"column":8,"nodeType":"247","endLine":22,"endColumn":10,"suggestions":"250"},{"ruleId":"224","severity":1,"message":"251","line":13,"column":54,"nodeType":"226","messageId":"227","endLine":13,"endColumn":62},{"ruleId":"224","severity":1,"message":"252","line":3,"column":8,"nodeType":"226","messageId":"227","endLine":3,"endColumn":18},"no-native-reassign",["253"],"no-negated-in-lhs",["254"],"@typescript-eslint/no-unused-vars","'media' is assigned a value but never used.","Identifier","unusedVar","'Input' is defined but never used.","'blueGrey' is defined but never used.","'grey' is defined but never used.","'red' is defined but never used.","'imageService' is defined but never used.","'AssociationService' is defined but never used.","'AnimalSelector' is defined but never used.","'Button' is defined but never used.","'Component' is defined but never used.","'TextField' is defined but never used.","'MaterialUiPickersDate' is defined but never used.","'Grid' is defined but never used.","'Box' is defined but never used.","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","JSXOpeningElement","'React' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'register'. Either include it or remove the dependency array.","ArrayExpression",["255"],"'RegistrationService' is defined but never used.",["256"],"'setError' is assigned a value but never used.","'PlaceModel' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"257","fix":"258"},{"desc":"257","fix":"259"},"Update the dependencies array to be: [register]",{"range":"260","text":"261"},{"range":"262","text":"261"},[1278,1280],"[register]",[1026,1028]]